package com.multigold.mdm.web.controller.po;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.multigold.common.constants.Constants;
import com.multigold.common.service.BaseService;
import com.multigold.common.util.JsonUtil;
import com.multigold.common.web.controller.BaseCRUDAction;
import com.multigold.common.web.springmvc.MessageResolver;
import com.multigold.mdm.web.controller.util.UserSessionProvider;
import com.multigold.t6.service.api.po.PaymentSettlementService;
import com.multigold.t6.vo.po.InvoiceVO;
import com.multigold.t6.vo.po.PaymentSettlementVO;

@Controller
@RequestMapping(value = "${adminPath}/po/paymentSettlement")
public class PaymentSettlementController extends BaseCRUDAction<PaymentSettlementVO, String>{

	@Autowired
	PaymentSettlementService<PaymentSettlementVO, String> paymentSettlementService;
	
	@Override
	public BaseService<PaymentSettlementVO, String> getBaseService() {
		return paymentSettlementService;
	}

	@Override
	protected void setDefaultValue(HttpServletRequest request, PaymentSettlementVO paymentSettlementVO,
			String operateFlag) {
		paymentSettlementVO.setInsertBy(UserSessionProvider.getUserSerssion(request).getAccount());
		paymentSettlementVO.setModifiedBy(UserSessionProvider.getUserSerssion(request).getAccount());
	}
	
	/*
	 * @Title: paymentSettlement 
	 * @Description: 付款结算列表
	 * @return String
	 */
	@RequestMapping(value = "paymentSettlementList", method = RequestMethod.GET)
	public String paymentSettlementList() {
		return viewName("list");
	}
	
	/*
	 * 获取付款结算列表
	 * @return
	 */
	@RequestMapping(value = "paymentSettlementLists", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> getPaymentSettlementLists(HttpServletRequest request, String paymentCode, String venCode, String status, Long page, Integer rows) {
		Map<String, Object> resultMap = Maps.newHashMap();
		Map<String, Object> map = Maps.newHashMap();
		if (!StringUtils.isEmpty(paymentCode)) {
			map.put("paymentCode", paymentCode);
		}
		if (!StringUtils.isEmpty(venCode)) {
			map.put("venCode", venCode);
		}
		if (!StringUtils.isEmpty(status)) {
			map.put("status", status);
		}
		map.put("page", page);
		map.put("rows", rows);
		resultMap= paymentSettlementService.getPaymentSettlementList(map);
		return resultMap;
	}
	
	/*
	 * @Title: paymentSettlement 
	 * @Description: 插入付款结算
	 * @return String
	 */
	@RequestMapping(value = "createPaymentSettlement", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> createPaymentSettlement(HttpServletRequest request, String paymentCode, String venCode, String venName,
			String oppSubject, String clearingForm, String settlementSubject, String vendorBank, String vendorAccount,
			String itemCode, String sum, String digest,String prePaymentID, String invoiceID) {
		final Map<String, Object> map = Maps.newHashMap();
		PaymentSettlementVO paymentSettlementVO = new PaymentSettlementVO();
		if (!StringUtils.isEmpty(paymentCode)) {
			paymentSettlementVO.setPaymentCode(paymentCode);
		}
		if (!StringUtils.isEmpty(venCode)) {
			paymentSettlementVO.setVenCode(venCode);
		}
		if (!StringUtils.isEmpty(venName)) {
			paymentSettlementVO.setVenName(venName);
		}
		if (!StringUtils.isEmpty(oppSubject)) {
			paymentSettlementVO.setOppSubject(oppSubject);
		}
		if (!StringUtils.isEmpty(clearingForm)) {
			paymentSettlementVO.setClearingForm(clearingForm);
		}
		if (!StringUtils.isEmpty(settlementSubject)) {
			paymentSettlementVO.setSettlementSubject(settlementSubject);
		}
		if (!StringUtils.isEmpty(vendorBank)) {
			paymentSettlementVO.setVendorBank(vendorBank);
		}
		if (!StringUtils.isEmpty(vendorAccount)) {
			paymentSettlementVO.setVendorAccount(vendorAccount);
		}
		if (!StringUtils.isEmpty(itemCode)) {
			paymentSettlementVO.setItemCode(itemCode);
		}
		if (!StringUtils.isEmpty(sum)) {
			paymentSettlementVO.setSum(new BigDecimal(sum));
		}
		if (!StringUtils.isEmpty(digest)) {
			paymentSettlementVO.setDigest(digest);
		}
		if (!StringUtils.isEmpty(prePaymentID)) {
			paymentSettlementVO.setPrePaymentID(prePaymentID);
		}
		if (!StringUtils.isEmpty(invoiceID)) {
			paymentSettlementVO.setInvoiceID(invoiceID);
		}
		/*String aa = UserSessionProvider.getUserSerssion(request).getName();*/
		String strAccount = UserSessionProvider.getUserSerssion(request).getAccount();
		paymentSettlementVO.setInputer(strAccount);
		paymentSettlementVO.setCreateTd(new Date());
		paymentSettlementVO.setStatus(1);//新建
		paymentSettlementVO.setPayType(1);//采购
		paymentSettlementVO.setType(2);//应付款
		try {
			//获取最大ID
			int MaxPaymentSettlementNo = paymentSettlementService.getMaxPaymentSettlementNo();
			MaxPaymentSettlementNo++;
			paymentSettlementVO.setId(MaxPaymentSettlementNo);
			
			paymentSettlementService.createPaymentSettlement(paymentSettlementVO);
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.SUCCESS_SAVE));
			map.put("state", Constants.State.TRUE);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.FAILED_UPDATE));
			map.put("state", Constants.State.FALSE);
		}
		
		return map;
	}
	/*
	 * @Title: paymentSettlement 
	 * @Description: 更改
	 * @return 
	 */
	@RequestMapping(value = "updatePaymentSettlement", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> updatePaymentSettlement(HttpServletRequest request, String id, String paymentCode, String venCode, String venName,
			String oppSubject, String clearingForm, String settlementSubject, String vendorBank, String vendorAccount,
			String itemCode, String sum, String digest, String prePaymentID, String invoiceID) {
		final Map<String, Object> map = Maps.newHashMap();
		PaymentSettlementVO paymentSettlementVO = new PaymentSettlementVO();
		if (!StringUtils.isEmpty(id)) {
			paymentSettlementVO.setId(Integer.parseInt(id));
		}
		if (!StringUtils.isEmpty(paymentCode)) {
			paymentSettlementVO.setPaymentCode(paymentCode);
		}
		if (!StringUtils.isEmpty(venCode)) {
			paymentSettlementVO.setVenCode(venCode);
		}
		if (!StringUtils.isEmpty(venName)) {
			paymentSettlementVO.setVenName(venName);
		}
		if (!StringUtils.isEmpty(oppSubject)) {
			paymentSettlementVO.setOppSubject(oppSubject);
		}
		if (!StringUtils.isEmpty(clearingForm)) {
			paymentSettlementVO.setClearingForm(clearingForm);
		}
		if (!StringUtils.isEmpty(settlementSubject)) {
			paymentSettlementVO.setSettlementSubject(settlementSubject);
		}
		if (!StringUtils.isEmpty(vendorBank)) {
			paymentSettlementVO.setVendorBank(vendorBank);
		}
		if (!StringUtils.isEmpty(vendorAccount)) {
			paymentSettlementVO.setVendorAccount(vendorAccount);
		}
		if (!StringUtils.isEmpty(itemCode)) {
			paymentSettlementVO.setItemCode(itemCode);
		}
		if (!StringUtils.isEmpty(sum)) {
			paymentSettlementVO.setSum(new BigDecimal(sum));
		}
		if (!StringUtils.isEmpty(digest)) {
			paymentSettlementVO.setDigest(digest);
		}
		if (!StringUtils.isEmpty(prePaymentID)) {
			paymentSettlementVO.setPrePaymentID(prePaymentID);
		}
		if (!StringUtils.isEmpty(invoiceID)) {
			paymentSettlementVO.setInvoiceID(invoiceID);
		}
		String strAccount = UserSessionProvider.getUserSerssion(request).getAccount();
		paymentSettlementVO.setModifier(strAccount);
		paymentSettlementVO.setCreateTd(new Date());
		try {
			paymentSettlementService.updatePaymentSettlement(paymentSettlementVO);
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.SUCCESS_SAVE));
			map.put("state", Constants.State.TRUE);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.FAILED_UPDATE));
			map.put("state", Constants.State.FALSE);
		}
		return map;
	}
	
	/*
	 * @Title: paymentSettlement 
	 * @Description: 选择列表 预付单
	 * @return list
	 */
	@RequestMapping(value = "prepayment", method = RequestMethod.POST)
	@ResponseBody
	public List<PaymentSettlementVO> queryPrepayment(HttpServletRequest request, String vendorSelectVal){
		
		PaymentSettlementVO paymentSettlementVO = new PaymentSettlementVO();
		paymentSettlementVO.setVenName(vendorSelectVal);
		List<PaymentSettlementVO> list = paymentSettlementService.getPrepayment(paymentSettlementVO);
		
		return list;
	}
	
	/*
	 * @Title: paymentSettlement 
	 * @Description: 选择列表 发票
	 * @return list
	 */
	@RequestMapping(value = "invoice", method = RequestMethod.POST)
	@ResponseBody
	public List<InvoiceVO> queryInvoice(HttpServletRequest request, String vendorSelectVal){
		
		InvoiceVO invoiceVO = new InvoiceVO();
		invoiceVO.setVenName(vendorSelectVal);
		List<InvoiceVO> list = paymentSettlementService.getInvoice(invoiceVO);
		
		return list;
	}
	
	/*
	 * 加载下拉列表：系统信息表
	 * 
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "paymentSettlementVenNameList", method = RequestMethod.POST)
	@ResponseBody
	public List<Map<String, Object>> getPaymentSettlementVenNameList(HttpServletResponse response) {
		List<Map<String, Object>> list = Lists.newArrayList();
		try {
			//private CommonService <VendorVO, Long> commonService;
			List<PaymentSettlementVO> queryList = paymentSettlementService.queryVenList();
			if ((null != queryList) && (queryList.size() > 0)) {
				for (PaymentSettlementVO systemModel : queryList) {
					Map<String, Object> map = Maps.newHashMap();
					map.put("venCode", systemModel.getcVenCode());
					map.put("venName", systemModel.getcVenName());
					//map.put("name", systemModel.getName());
					list.add(map);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
	
	/*
	 * 提交
	 * @return
	 */
	@RequestMapping(value = "commitByIds", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> getCommitByIds(HttpServletRequest request,String rowsData) {
		final Map<String, Object> map = Maps.newHashMap();
		List<PaymentSettlementVO> psvList  = new ArrayList<PaymentSettlementVO>();
		if(null!=rowsData && !("").equals(rowsData)){
			psvList = (List<PaymentSettlementVO>)JsonUtil.jsonToList(rowsData, PaymentSettlementVO.class);
		}
		try {
			for (PaymentSettlementVO p : psvList) {
				p.setStatus(2);
				paymentSettlementService.commitByIds(p);
			}
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.SUCCESS_SAVE));
			map.put("state", Constants.State.TRUE);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.FAILED_UPDATE));
			map.put("state", Constants.State.FALSE);
		}
		return map;
	}
	
}
