package com.multigold.mdm.web.controller.po;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.multigold.common.constants.Constants;
import com.multigold.common.service.BaseService;
import com.multigold.common.util.JsonUtil;
import com.multigold.common.web.controller.BaseCRUDAction;
import com.multigold.common.web.springmvc.MessageResolver;
import com.multigold.mdm.web.controller.util.UserSessionProvider;
import com.multigold.t6.service.api.po.PaymentSettlementService;
import com.multigold.t6.vo.po.InvoiceVO;
import com.multigold.t6.vo.po.MgPayAndInvVO;
import com.multigold.t6.vo.po.MgRdAndInvVO;
import com.multigold.t6.vo.po.PaymentSettlementVO;
import com.multigold.upms.entity.security.User;

@Controller
@RequestMapping(value = "${adminPath}/po/paymentSettlement")
public class PaymentSettlementController extends BaseCRUDAction<PaymentSettlementVO, String>{

	@Autowired
	PaymentSettlementService<PaymentSettlementVO, String> paymentSettlementService;
	
	@Override
	public BaseService<PaymentSettlementVO, String> getBaseService() {
		return paymentSettlementService;
	}

	@Override
	protected void setDefaultValue(HttpServletRequest request, PaymentSettlementVO paymentSettlementVO,
			String operateFlag) {
		paymentSettlementVO.setInsertBy(UserSessionProvider.getUserSerssion(request).getAccount());
		paymentSettlementVO.setModifiedBy(UserSessionProvider.getUserSerssion(request).getAccount());
	}
	
	/*
	 * @Title: paymentSettlement 
	 * @Description: 付款结算列表
	 * @return String
	 */
	@RequestMapping(value = "paymentSettlementList", method = RequestMethod.GET)
	public String paymentSettlementList() {
		return viewName("list");
	}
	
	/*
	 * 获取付款结算列表
	 * @return
	 */
	@RequestMapping(value = "paymentSettlementLists", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> getPaymentSettlementLists(HttpServletRequest request, String paymentCode, String venCode, String status, String redFlag, Long page, Integer rows) {
		Map<String, Object> resultMap = Maps.newHashMap();
		Map<String, Object> map = Maps.newHashMap();
		if (!StringUtils.isEmpty(paymentCode)) {
			map.put("paymentCode", paymentCode);
		}
		if (!StringUtils.isEmpty(venCode)) {
			map.put("venCode", venCode);
		}
		if (!StringUtils.isEmpty(status)) {
			map.put("status", status);
		}
		if (!StringUtils.isEmpty(redFlag)) {
			map.put("redFlag", redFlag);
		}
		map.put("type", 2);//应付款
		map.put("payType", 1);//采购
		map.put("page", page);
		map.put("rows", rows);
		resultMap= paymentSettlementService.getPaymentSettlementList(map);
		return resultMap;
	}
	/*
	 * 获取付款结算列表
	 * @return
	 */
	@RequestMapping(value = "updateQueryPaymentSettlementLists", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> updateQueryPaymentSettlementLists(HttpServletRequest request, int id) {
		Map<String, Object> resultMap = Maps.newHashMap();
		Map<String, Object> map = Maps.newHashMap();
		/*if (!StringUtils.isEmpty(id)) {
			map.put("id", id);
		}*/
		resultMap= paymentSettlementService.updateQueryPaymentSettlementLists(id);
		return resultMap;
	}
	
	/*
	 * @Title: paymentSettlement 
	 * @Description: 插入付款结算
	 * @return String
	 */
	@RequestMapping(value = "createPaymentSettlement", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> createPaymentSettlement(HttpServletRequest request, String paymentCode1, String venCode1, String venName1,
			String oppSubject1, String clearingForm1, String settlementSubject1, String vendorBank1, String vendorAccount1,
			String itemCode1, String sum1, String digest1,String prePaymentID1, String invoiceID1, Date ticketDate1, String redFlag1) {
		final Map<String, Object> map = Maps.newHashMap();
		PaymentSettlementVO paymentSettlementVO = new PaymentSettlementVO();
		if (!StringUtils.isEmpty(paymentCode1)) {
			paymentSettlementVO.setPaymentCode(paymentCode1);
		}
		if (!StringUtils.isEmpty(venCode1)) {
			paymentSettlementVO.setVenCode(venCode1);
		}
		if (!StringUtils.isEmpty(venName1)) {
			paymentSettlementVO.setVenName(venName1);
		}
		if (!StringUtils.isEmpty(oppSubject1)) {
			paymentSettlementVO.setOppSubject(oppSubject1);
		}
		if (!StringUtils.isEmpty(clearingForm1)) {
			paymentSettlementVO.setClearingForm(clearingForm1);
		}
		if (!StringUtils.isEmpty(settlementSubject1)) {
			paymentSettlementVO.setSettlementSubject(settlementSubject1);
		}
		if (!StringUtils.isEmpty(vendorBank1)) {
			paymentSettlementVO.setVendorBank(vendorBank1);
		}
		if (!StringUtils.isEmpty(vendorAccount1)) {
			paymentSettlementVO.setVendorAccount(vendorAccount1);
		}
		if (!StringUtils.isEmpty(itemCode1)) {
			paymentSettlementVO.setItemCode(itemCode1);
		}
		if (!StringUtils.isEmpty(sum1)) {
			paymentSettlementVO.setSum(new BigDecimal(sum1));
		}
		if (!StringUtils.isEmpty(digest1)) {
			paymentSettlementVO.setDigest(digest1);
		}
		if (!StringUtils.isEmpty(prePaymentID1)) {
			paymentSettlementVO.setPrePaymentID(prePaymentID1);
		}
		if (!StringUtils.isEmpty(invoiceID1)) {
			paymentSettlementVO.setInvoiceID(invoiceID1);
		}
		if (!StringUtils.isEmpty(redFlag1)) {
			paymentSettlementVO.setRedFlag(redFlag1);
		}
		if (!StringUtils.isEmpty(ticketDate1)) {
			paymentSettlementVO.setTicketDate(ticketDate1);
		}
		String[] ss = null;
		if (!StringUtils.isEmpty(invoiceID1)) {
			ss = invoiceID1.split(",");
		}
		String[] pp = null;
		if (!StringUtils.isEmpty(prePaymentID1)) {
			pp = prePaymentID1.split(",");
		}
		/*User user = new User();
		user.setTimezone(timezone);
		UserSessionProvider.setUserSerssion(request, user);*/
		/*String aa = UserSessionProvider.getUserSerssion(request).getName();*/
		String strAccount = UserSessionProvider.getUserSerssion(request).getAccount();
		paymentSettlementVO.setInputer(strAccount);
		paymentSettlementVO.setCreateTd(new Date());
		paymentSettlementVO.setStatus(1);//新建
		paymentSettlementVO.setPayType(1);//采购
		paymentSettlementVO.setType(2);//应付款
		PaymentSettlementVO psvVenName = paymentSettlementService.queryVenName(paymentSettlementVO);
		paymentSettlementVO.setVenName(psvVenName.getcVenName());
		try {
			//获取最大ID
			int MaxPaymentSettlementNo = paymentSettlementService.getMaxPaymentSettlementNo();
			MaxPaymentSettlementNo++;
			paymentSettlementVO.setId(MaxPaymentSettlementNo);
			//插入付款表信息
			paymentSettlementService.createPaymentSettlement(paymentSettlementVO);
			
			//插入发票、付款单关联信息表
			MgPayAndInvVO mgPayAndInvVO = null;
			if (!StringUtils.isEmpty(ss)) {
				for (int i = 0; i < ss.length; i++) {
					mgPayAndInvVO = new MgPayAndInvVO();
					mgPayAndInvVO.setPaymentId(MaxPaymentSettlementNo);
					mgPayAndInvVO.setInvoiceId(Integer.parseInt(ss[i]));
					paymentSettlementService.createMgPayAndInv(mgPayAndInvVO);
				}
			}
			//更新预付单中paymentId
			if (!StringUtils.isEmpty(pp)) {
				for (int i = 0; i < pp.length; i++) {
					paymentSettlementVO.setId(Integer.parseInt(pp[i]));//预付单ID
					paymentSettlementVO.setPaymentId(MaxPaymentSettlementNo+"");//付款单ID
					paymentSettlementService.updatePrePaymentID(paymentSettlementVO);
				}
			}
			
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.SUCCESS_SAVE));
			map.put("state", Constants.State.TRUE);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.FAILED_UPDATE));
			map.put("state", Constants.State.FALSE);
		}
		
		return map;
	}
	/*
	 * @Title: paymentSettlement 
	 * @Description: 更改
	 * @return 
	 */
	@RequestMapping(value = "updatePaymentSettlement", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> updatePaymentSettlement(HttpServletRequest request, String id, String paymentCode2, String venCode2, String venName2,
			String oppSubject2, String clearingForm2, String settlementSubject2, String vendorBank2, String vendorAccount2,
			String itemCode2, String sum2, String digest2, String prePaymentID2, String invoiceID2, Date ticketDate2, String redFlag2) {
		final Map<String, Object> map = Maps.newHashMap();
		PaymentSettlementVO paymentSettlementVO = new PaymentSettlementVO();
		if (!StringUtils.isEmpty(id)) {
			paymentSettlementVO.setId(Integer.parseInt(id));
		}
		if (!StringUtils.isEmpty(paymentCode2)) {
			paymentSettlementVO.setPaymentCode(paymentCode2);
		}
		if (!StringUtils.isEmpty(venCode2)) {
			paymentSettlementVO.setVenCode(venCode2);
		}
		if (!StringUtils.isEmpty(venName2)) {
			paymentSettlementVO.setVenName(venName2);
		}
		if (!StringUtils.isEmpty(oppSubject2)) {
			paymentSettlementVO.setOppSubject(oppSubject2);
		}
		if (!StringUtils.isEmpty(clearingForm2)) {
			paymentSettlementVO.setClearingForm(clearingForm2);
		}
		if (!StringUtils.isEmpty(settlementSubject2)) {
			paymentSettlementVO.setSettlementSubject(settlementSubject2);
		}
		if (!StringUtils.isEmpty(vendorBank2)) {
			paymentSettlementVO.setVendorBank(vendorBank2);
		}
		if (!StringUtils.isEmpty(vendorAccount2)) {
			paymentSettlementVO.setVendorAccount(vendorAccount2);
		}
		if (!StringUtils.isEmpty(itemCode2)) {
			paymentSettlementVO.setItemCode(itemCode2);
		}
		if (!StringUtils.isEmpty(sum2)) {
			paymentSettlementVO.setSum(new BigDecimal(sum2));
		}
		if (!StringUtils.isEmpty(digest2)) {
			paymentSettlementVO.setDigest(digest2);
		}
		if (!StringUtils.isEmpty(prePaymentID2)) {
			paymentSettlementVO.setPrePaymentID(prePaymentID2);
		}
		if (!StringUtils.isEmpty(invoiceID2)) {
			paymentSettlementVO.setInvoiceID(invoiceID2);
		}
		if (!StringUtils.isEmpty(redFlag2)) {
			paymentSettlementVO.setRedFlag(redFlag2);
		}
		if (!StringUtils.isEmpty(ticketDate2)) {
			paymentSettlementVO.setTicketDate(ticketDate2);
		}
		String[] ss = null;
		if (!StringUtils.isEmpty(invoiceID2)) {
			ss = invoiceID2.split(",");
		}else{
			paymentSettlementVO.setInvoiceID("");
		}
		String[] pp = null;
		if (!StringUtils.isEmpty(prePaymentID2)) {
			pp = prePaymentID2.split(",");
		}else{
			paymentSettlementVO.setPrePaymentID("");
		}
		String strAccount = UserSessionProvider.getUserSerssion(request).getAccount();
		paymentSettlementVO.setModifier(strAccount);
		paymentSettlementVO.setCreateTd(new Date());
		paymentSettlementVO.setStatus(1);//新建
		paymentSettlementVO.setPayType(1);//采购
		paymentSettlementVO.setType(2);//应付款
		PaymentSettlementVO psvVenName = paymentSettlementService.queryVenName(paymentSettlementVO);
		paymentSettlementVO.setVenName(psvVenName.getcVenName());
		try {
			//更改或删除  发票、付款单关联信息表
			MgPayAndInvVO mgPayAndInvVO = null;
			String[] tt = null;
			boolean flag = true;
			PaymentSettlementVO queryInvoiceIdOrPrePaymentId = paymentSettlementService.queryInvoiceIdOrPrePaymentId(paymentSettlementVO);
			if (!StringUtils.isEmpty(ss)) {
				for (int i = 0; i < ss.length; i++) {
					//总概括：查询 mg_rd_payment表  if非空，非空先删除mg_pay_and_inv对应的关联关系之后再插入， else则新增
					if(flag){
						//根据ID先查询mg_rd_payment表的invoiceID字段
						
						String queryInvoiceID = queryInvoiceIdOrPrePaymentId.getInvoiceID();
						if (!StringUtils.isEmpty(queryInvoiceID)){
							tt = queryInvoiceID.split(",");
							for (int j = 0; j < tt.length; j++) {
								mgPayAndInvVO = new MgPayAndInvVO();
								mgPayAndInvVO.setPaymentId(Integer.parseInt(id));
								mgPayAndInvVO.setInvoiceId(Integer.parseInt(tt[j]));
								//针对mg_pay_and_inv表 进行删除
								paymentSettlementService.deleteMgPayAndInv(mgPayAndInvVO);
							}
						}
						flag = false;
					}
					mgPayAndInvVO = new MgPayAndInvVO();
					mgPayAndInvVO.setPaymentId(Integer.parseInt(id));
					mgPayAndInvVO.setInvoiceId(Integer.parseInt(ss[i]));
					paymentSettlementService.createMgPayAndInv(mgPayAndInvVO);
				}
			}else{//当页面选择的发票单为“”时，说明付款单与发票之间的关系删除了
				//先查询mg_rd_payment表的invoiceID字段
				String queryInvoiceID = queryInvoiceIdOrPrePaymentId.getInvoiceID();
				//判断mg_rd_payment表中InvoiceID是否为空
				if (!StringUtils.isEmpty(queryInvoiceID)){
					ss = queryInvoiceID.split(",");
					for(int i = 0; i < ss.length; i++){
						mgPayAndInvVO = new MgPayAndInvVO();
						mgPayAndInvVO.setPaymentId(Integer.parseInt(id));
						mgPayAndInvVO.setInvoiceId(Integer.parseInt(ss[i]));
						//针对mg_pay_and_inv表 进行删除
						paymentSettlementService.deleteMgPayAndInv(mgPayAndInvVO);
					}
				}
			}
			//更新预付单中paymentId
			flag = true;
			PaymentSettlementVO paymentSettlementVOObj = new PaymentSettlementVO();
			if (!StringUtils.isEmpty(pp)) {
				for (int i = 0; i < pp.length; i++) {
					//总概括：查询 mg_rd_payment表  if非空，非空则直接更新mg_rd_payment对应的paymentId字段之后再更新paymentId字段， else则直接更新mg_rd_payment的paymentId字段
					if(flag){
						//根据ID先查询mg_rd_payment表的prePaymentID字段
						String queryPrePaymentID= queryInvoiceIdOrPrePaymentId.getPrePaymentID();
						if (!StringUtils.isEmpty(queryPrePaymentID)){
							tt = queryPrePaymentID.split(",");
							for (int j = 0; j < tt.length; j++) {
								paymentSettlementVOObj.setId(Integer.parseInt(tt[j]));
//								paymentSettlementVOObj.setPaymentId(Integer.parseInt(id));
								paymentSettlementVOObj.setPaymentId("");
								//针对mg_rd_payment表 删除预付单与付款单的关联关系 即paymentId字段	条件是预付单的ID
								paymentSettlementService.updatePrePaymentID(paymentSettlementVOObj);
							}
						}
						flag = false;
					}
					paymentSettlementVOObj.setId(Integer.parseInt(pp[i]));//预付单ID
					paymentSettlementVOObj.setPaymentId(id);//付款单ID
					paymentSettlementService.updatePrePaymentID(paymentSettlementVOObj);
				}
			}else{//当页面选择的预付单为“”时，说明付款单与预付之间的关系删除了
				//先查询mg_rd_payment表的PrePaymentID字段
				String queryPrePaymentID = queryInvoiceIdOrPrePaymentId.getPrePaymentID();
				//判断mg_rd_payment表中PrePaymentID是否为空
				if (!StringUtils.isEmpty(queryPrePaymentID)){
					tt = queryPrePaymentID.split(",");
					for(int i = 0; i < tt.length; i++){
						paymentSettlementVOObj.setId(Integer.parseInt(tt[i]));
//						paymentSettlementVOObj.setPaymentId(Integer.parseInt(id));
						paymentSettlementVOObj.setPaymentId("");
						//针对mg_rd_payment表 进行更新 条件是预付单的ID
						paymentSettlementService.updatePrePaymentID(paymentSettlementVOObj);
					}
				}
			}
			//更新mg_rd_payment表
			paymentSettlementService.updatePaymentSettlement(paymentSettlementVO);
			
			map.put("msg", MessageResolver.getMessage(request, 
					Constants.Message.SUCCESS_SAVE));
			map.put("state", Constants.State.TRUE);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.FAILED_UPDATE));
			map.put("state", Constants.State.FALSE);
		}
		return map;
	}
	
	/*
	 * @Title: paymentSettlement 
	 * @Description: 选择列表 预付单
	 * @return list
	 */
	@RequestMapping(value = "prepayment", method = RequestMethod.POST)
	@ResponseBody
	public List<PaymentSettlementVO> queryPrepayment(HttpServletRequest request, String vendorSelectVal){
		
		PaymentSettlementVO paymentSettlementVO = new PaymentSettlementVO();
		paymentSettlementVO.setVenCode(vendorSelectVal);
		paymentSettlementVO.setType(1);
		List<PaymentSettlementVO> list = paymentSettlementService.getPrepayment(paymentSettlementVO);
		
		return list;
	}
	
	/*
	 * @Title: paymentSettlement 
	 * @Description: 选择列表 发票
	 * @return list
	 */
	@RequestMapping(value = "invoice", method = RequestMethod.POST)
	@ResponseBody
	public List<InvoiceVO> queryInvoice(HttpServletRequest request, String vendorSelectVal){
		
		InvoiceVO invoiceVO = new InvoiceVO();
		invoiceVO.setVenCode(vendorSelectVal);
		List<InvoiceVO> list = paymentSettlementService.getInvoice(invoiceVO);
		
		return list;
	}
	
	/*
	 * 加载下拉列表：供应商表
	 * 
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "paymentSettlementVenNameList", method = RequestMethod.POST)
	@ResponseBody
	public List<Map<String, Object>> getPaymentSettlementVenNameList(HttpServletResponse response) {
		List<Map<String, Object>> list = Lists.newArrayList();
		try {
			List<PaymentSettlementVO> queryList = paymentSettlementService.queryVenList();
			if ((null != queryList) && (queryList.size() > 0)) {
				for (PaymentSettlementVO systemModel : queryList) {
					Map<String, Object> map = Maps.newHashMap();
					map.put("venCode", systemModel.getcVenCode());
					map.put("venName", systemModel.getcVenName());
					list.add(map);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
	
	/*
	 * 加载下拉列表：结算科目表
	 * 
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "querySettles", method = RequestMethod.POST)
	@ResponseBody
	public List<Map<String, Object>> getQuerySettles(HttpServletResponse response) {
		List<Map<String, Object>> list = Lists.newArrayList();
		try {
			List<PaymentSettlementVO> queryList = paymentSettlementService.getQuerySettles();
			if ((null != queryList) && (queryList.size() > 0)) {
				for (PaymentSettlementVO systemModel : queryList) {
					Map<String, Object> map = Maps.newHashMap();
					map.put("cCode", systemModel.getcCode());
					map.put("cSSName", systemModel.getcSSName());
					list.add(map);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
	
	/*
	 * 提交
	 * @return
	 */
	@RequestMapping(value = "commitByIds", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> getCommitByIds(HttpServletRequest request,String rowsData) {
		final Map<String, Object> map = Maps.newHashMap();
		List<PaymentSettlementVO> psvList  = new ArrayList<PaymentSettlementVO>();
		if(null!=rowsData && !("").equals(rowsData)){
			psvList = (List<PaymentSettlementVO>)JsonUtil.jsonToList(rowsData, PaymentSettlementVO.class);
		}
		try {
			for (PaymentSettlementVO p : psvList) {
				p.setStatus(2);
				paymentSettlementService.commitByIds(p);
			}
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.SUCCESS_SAVE));
			map.put("state", Constants.State.TRUE);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("msg", MessageResolver.getMessage(request,
					Constants.Message.FAILED_UPDATE));
			map.put("state", Constants.State.FALSE);
		}
		return map;
	}
	
}
